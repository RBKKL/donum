/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DonationsStoreInterface extends utils.Interface {
  functions: {
    "donate(address,string)": FunctionFragment;
    "recipients(address)": FunctionFragment;
    "setRecipientInfo(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "donate" | "recipients" | "setRecipientInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipientInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipientInfo",
    data: BytesLike
  ): Result;

  events: {
    "NewDonation(address,address,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDonation"): EventFragment;
}

export interface NewDonationEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  timestamp: BigNumber;
  message: string;
}
export type NewDonationEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  NewDonationEventObject
>;

export type NewDonationEventFilter = TypedEventFilter<NewDonationEvent>;

export interface DonationsStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DonationsStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    donate(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { nickname: string; avatarURI: string }>;

    setRecipientInfo(
      _nickname: PromiseOrValue<string>,
      _avatarURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  donate(
    _to: PromiseOrValue<string>,
    _message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recipients(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { nickname: string; avatarURI: string }>;

  setRecipientInfo(
    _nickname: PromiseOrValue<string>,
    _avatarURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    donate(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { nickname: string; avatarURI: string }>;

    setRecipientInfo(
      _nickname: PromiseOrValue<string>,
      _avatarURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewDonation(address,address,uint256,uint256,string)"(
      from?: null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
      message?: null
    ): NewDonationEventFilter;
    NewDonation(
      from?: null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null,
      message?: null
    ): NewDonationEventFilter;
  };

  estimateGas: {
    donate(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRecipientInfo(
      _nickname: PromiseOrValue<string>,
      _avatarURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    donate(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRecipientInfo(
      _nickname: PromiseOrValue<string>,
      _avatarURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
